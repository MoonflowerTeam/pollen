plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

archivesBaseName = "${rootProject.archivesBaseName}-${project.name}"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "${project.mod_id}-common.mixins.json"
        mixinConfig "${project.mod_id}-common.client.mixins.json"
        mixinConfig "${project.mod_id}.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_major_version}.${rootProject.forge_minor_version}.${rootProject.forge_build_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${rootProject.mixinextras_version}"))
    implementation(include("com.github.llamalad7.mixinextras:mixinextras-forge:${rootProject.mixinextras_version}"))

    // Pinwheel
    include(forgeRuntimeLibrary("gg.moonflower.pinwheel:pinwheel:${rootProject.pinwheel_version}"))
    include(forgeRuntimeLibrary("gg.moonflower:molang-compiler:${rootProject.molangcompiler_version}"))
    include(forgeRuntimeLibrary("org.joml:joml:${rootProject.joml_version}"))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "mod_id", project.mod_id
    inputs.property "mod_version", project.mod_version
    inputs.property "mod_name", project.mod_name
    inputs.property "mod_description", project.mod_description
    inputs.property "archives_base_name", project.archives_base_name

    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "forge_major_version", project.forge_major_version

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand "mod_id": project.mod_id,
                "mod_version": project.mod_version,
                "mod_name": project.mod_name,
                "mod_description": project.mod_description,
                "archives_base_name": project.archives_base_name,
                "minecraft_version": project.minecraft_version,
                "forge_major_version": project.forge_major_version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    relocate "org.joml.joml", "gg.moonflower.pollen.joml"
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = project.archivesBaseName
            from components.java
        }
    }
}