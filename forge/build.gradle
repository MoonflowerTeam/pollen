import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

archivesBaseName = "${rootProject.archivesBaseName}-${project.name}"

loom {
    accessWidenerPath.set(project(":common").file("src/main/resources/${project.mod_id}.accesswidener"))

    forge {
        // For some reason gradle doesn't like using rootProject here?
        mixinConfig "${project.mod_id}-common.mixins.json"
        mixinConfig "${project.mod_id}.mixins.json"

        convertAccessWideners.set(true)
        extraAccessWideners.add("${project.mod_id}.accesswidener")

        dataGen {
            mod project.mod_id
        }
    }
    mixin {
        defaultRefmapName = "${project.mod_id}-refmap.json"
    }
    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    forgeRuntimeLibrary implementation("com.github.MoonflowerTeam:molang-compiler:${project.molang_compiler_version}")
    shadowCommon "com.github.MoonflowerTeam:molang-compiler:${project.molang_compiler_version}"

    forgeRuntimeLibrary implementation("com.github.LlamaLad7:MixinExtras:${rootProject.mixin_extras_version}")
    shadowCommon "com.github.LlamaLad7:MixinExtras:${rootProject.mixin_extras_version}"
    annotationProcessor "com.github.LlamaLad7:MixinExtras:${rootProject.mixin_extras_version}"

    modRuntimeOnly "me.djtheredstoner:DevAuth-forge-latest:${rootProject.devauth_version}"
    modRuntimeOnly "curse.maven:configured-457570:3546348"
    modRuntimeOnly "curse.maven:catalogue-459701:3529457"

    modCompileOnly "mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}:api"
    modRuntimeOnly "mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "id", rootProject.mod_id
    inputs.property "name", rootProject.mod_name
    inputs.property "version", rootProject.mod_version
    inputs.property "repo", rootProject.name

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand "id": rootProject.mod_id,
                "name": rootProject.mod_name,
                "version": rootProject.mod_version,
                "repo": rootProject.name
    }

    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

shadowJar {
    mergeServiceFiles()
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    relocate "io.github.ocelot.molangcompiler", "gg.moonflower.pollen.molangcompiler"
    relocate "com.llamalad7.mixinextras", "gg.moonflower.pollen.mixinextras"
    classifier "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = project.archivesBaseName

            artifact remapJar
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }
}

loom.disableDeprecatedPomGeneration(publishing.publications.mavenForge)