plugins {
    id "pollen.module.platform"
}

archivesBaseName = "$archivesBaseName-fabric"

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    splitEnvironmentSourceSets()
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath

        compileClasspath += client.compileClasspath
        runtimeClasspath += client.runtimeClasspath
    }
}

dependencies {
    modApi "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    testmodImplementation sourceSets.main.output
    testmodImplementation sourceSets.client.output

    pollenExtension.moduleDependencies.get().forEach {
        def moduleSource = findProject(":$it:${project.name}").sourceSets
        implementation moduleSource.main.output
        clientImplementation moduleSource.client.output
    }

    clientImplementation(project(commonProject).sourceSets.client.output)
    common(project(path: commonProject, configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: commonProject, configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "id": pollenExtension.apiName.get(),
                "name": pollenExtension.apiName.get(),
                "version": rootProject.mod_version,
                "repo": rootProject.name
    }
}